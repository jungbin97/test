name: Java CI with Gradle

# 워크플로가 시작될 조건 지정
# 언제 이 파일의 내용이 실행될 것인지 정의
# 여기서 main 브랜치에 코드 push되거나 pull_request되었을 때 실행할 것을 말함.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github actions에서 사용하는 VM)가 읽을 수 있도록 허용한다는 의미
permissions:
  contents: read

# 실제 실행될 내용을 정의
jobs:
  build:
    runs-on: ubuntu-latest  # 실행 환경 지정 (ubuntu최신 버전에서 script를 실행)

    # 실행 스텝 지정
    steps:
    # 지정한 저장소(현재 레포지토리)에서 코드를 워크 플로우 환경으로 가져오도록 하는 github action
    - uses: actions/checkout@v3

    # open jdk 17 버전 환경을 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

#    # github secrets로부터 데이터를 받아서, 워크 플로우에 파일 생성
#    - name: Make application.properties
#      run : |
#        cd ./src/main/resources
#        touch ./application.properties
#        echo "${{ secrets.PROPERTIES }}" > ./application.properties
#      shell: bash

    # gradle을 통해 소스를 빌드.
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # dockerfile을 통해 이미지를 빌드하고, 이를 docker hub repo로 push
    # 이때 사용되는 ${{ secrets.DOCER_REPO }}/directors-dev가 위에서 만든 도커 repository이다.
    - name: Docker build & push to docker repo
      run: | 
#        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/directors-dev .
#        docker push ${{ secrets.DOCKER_REPO }}/directors-dev
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/directors-dev .
        docker push ${{ secrets.DOCKER_REPO }}/directors-dev

      # appleboy/ssh-action@master 액션을 사용하여 지장한 서버에 ssh로 접속하고, script를 실행한다.
    # script의 내용은 도커의 기존 프로세스들을 제거하고, docker hub  repo로부터 방금 push한 내용을 pull받아 실행하는 것
    # 실행시 docker-compose를 사용함
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      id: deploy
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/directors-dev
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/directors-dev
  #        docker-compose up -d
  #        docker image prune -f
